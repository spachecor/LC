1- CREAR UN MODELO, CONTROLADOR, ETC.
	php artisan make:model Post -mc (donde Post es el nombre del modelo)
	-m -> migracion
	-c -> controlador
	-s -> seader
	-f -> factory
	-a -> all
	
2- MODIFICACIÓN DE MIGRACION DE LA TABLA Post:

<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('posts', function (Blueprint $table) {
            $table->id();
            $table->timestamps();
            $table->string('titulo');
            $table->text('contenido')->nullable();
            $table->string('imagen')->nullable();
            $table->unsignedBigInteger('user_id');
            $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('posts');
    }
};
	Donde rellenamos los datos en la función up() y al final agregamos la clave foranea y la configuramos como sale en el ejemplo.

2.1- REALIZAMOS LA MIGRACION PARA HACER EFECTIVOS LOS CAMBIOS
	php artisan migrate:fresh
	
3- CONFIGURAMOS EL MODELO DE User PARA QUE CONTENGA LA RELACIÓN DE QUE UN USUARIO HACE MUCHOS POSTS

<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;

class User extends Authenticatable
{
    
    [.
    . OTRAS FUNCIONES.....
    .]
    
    /**
     * RELACION ENTRE POST Y USER
     * */
    public function posts(){
        return $this->hasMany(Post::class);//decimos que un usuario puede escribir muchos posts
    }
}

3.1- CONFIGURAMOS EL MODELO Post PARA QUE CONTENGA LA RELACIÓN DE QUE ES UN USUARIO EL QUE HACE LOS POST

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use App\Models\User;

class Post extends Model
{
    /**
     * RELACION ENTRE USER Y POST
     */
    public function user(){
        return $this->belongsTo(User::class);
    }
}

4- RELLENAMOS ALGUNOS DATOS PARA PROBAR QUE TODO ESTÉ CORRECTO
	con php artisan tinker:
	
	use App\Models\User;
	
	$user1 = new User();
	$user1->name = 'Selene';
	$user1->email='selene@gmail.com';
	$user1->password = Hash::make('selene');
	$user1->save();
	
	$user2 = new User();
	$user2->name = 'Juando';
	$user2->email='juando@gmail.com'; 
	$user2->password=Hash::make('juando');
	$user2->save();
	
	use App\Models\Post;
	
	$post1 = new Post();
	$post1->titulo='Mi primer post'
	$post1->user_id=(1);
	$post1->save();
	
	$post2 = new Post();
	$post2->titulo='Mi segundo post'
	$post2->user_id=(1);
	$post2->save();
	
	$post3 = new Post();
	$post3->titulo='Mi primer post'
	$post3->user_id=(2);
	$post3->save();
	
	$post4 = new Post();
	$post4->titulo='Mi segundo post'
	$post4->user_id=(2);
	$post4->save();
	
	$user1->posts;
